{"version":3,"file":"sdk-core.cjs.production.min.js","sources":["../src/constants.ts","../src/utils/validateAndParseAddress.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/utils/sortedInsert.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum ChainId {\n  MAINNET = 65524,\n  TESTNET = 65525\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import { getAddress } from '@ethersproject/address'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\n\n// warns if addresses are not checksummed\nexport default function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n","import invariant from 'tiny-invariant'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    invariant(decimals < 255, 'DECIMALS')\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport validateAndParseAddress from '../utils/validateAndParseAddress'\nimport { ChainId } from '../constants'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId | number\n  public readonly address: string\n\n  public constructor(chainId: ChainId | number, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH9: { [chainId in ChainId]: Token } = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH9',\n    'Wrapped Ether'\n  ),\n  [ChainId.TESTNET]: new Token(\n    ChainId.TESTNET,\n    '0x73DcdfeBe2b1Db8FAe6f0A5AA0f35C3BaDa6811A',\n    18,\n    'WETH9',\n    'Wrapped Ether'\n  )\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport default class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(JSBI.BigInt(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import JSBI from 'jsbi'\nimport { Rounding } from '../../constants'\nimport Fraction from './fraction'\n\nconst _100_PERCENT = new Fraction(JSBI.BigInt(100))\n\nexport default class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\nimport Fraction from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport default class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = JSBI.BigInt(amount)\n    invariant(JSBI.lessThanOrEqual(parsedAmount, MaxUint256), 'AMOUNT')\n\n    super(parsedAmount, JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import JSBI from 'jsbi'\nimport CurrencyAmount from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh } from '../../constants'\n\nexport default class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import JSBI from 'jsbi'\nimport { Token } from '../token'\nimport TokenAmount from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport Fraction from './fraction'\nimport CurrencyAmount from './currencyAmount'\n\nexport default class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport default function sortedInsert<T>(\n  items: T[],\n  add: T,\n  maxSize: number,\n  comparator: (a: T, b: T) => number\n): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","MaxUint256","JSBI","BigInt","validateAndParseAddress","address","getAddress","error","invariant","Currency","decimals","symbol","name","ETHER","Token","chainId","equals","other","this","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH9","MAINNET","TESTNET","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","_100_PERCENT","Percent","CurrencyAmount","currency","amount","parsedAmount","lessThanOrEqual","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fraction","quote","currencyAmount","_Fraction","adjusted","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop"],"mappings":"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"}